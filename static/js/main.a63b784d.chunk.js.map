{"version":3,"sources":["Components/Text/Text.js","Components/Input/Input.js","Components/ChangeColor/ChangeColor.js","serviceWorker.js","index.js"],"names":["Text","style","this","props","styles","className","React","Component","Input","dataAfterRefresh","state","color","inputType","JSON","parse","localStorage","getItem","checkInputValue","isHexadecimal","str","test","onInputChange","event","target","value","inputVal","inputValue","length","setState","isSingleSymbol","slice","colorData","sendColorDetails","removeItem","valueToCheck","substr","borderStatus","setItem","stringify","inpValue","passColorData","placeholder","setTimeout","onChange","maxLength","ChangeColor","setColorValues","backgroundColor","htmlFor","VARIABLES","textColorInput","colorLabel","id","backgroundColorInput","backgroundColorLabel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a63b784d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './text.css';\r\n\r\nconst initialText =\r\n  'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ' +\r\n  'Aenean eleifend rutrum libero, finibus congue dolor tempor id. ' +\r\n  'Nam interdum orci in massa imperdiet viverra. Duis neque libero, tempor ut leo in,' +\r\n  ' porta volutpat ipsum. Nullam non turpis ex. Aliquam erat volutpat. Ut ante libero,' +\r\n  ' vestibulum interdum ullamcorper ac, faucibus id metus. ' +\r\n  'Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.' +\r\n  ' Maecenas consectetur, odio non maximus elementum, leo nisi imperdiet nunc, ' +\r\n  'nec vehicula quam nisl vitae mi. Aliquam erat volutpat.';\r\n\r\nexport default class Text extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={this.props.styles} className=\"text\">\r\n        {initialText}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './input.css';\r\n\r\nexport default class Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      color: JSON.parse(localStorage.getItem(this.props.inputType)) || '',\r\n      inputType: this.props.inputType,\r\n      placeholder: '#FFFFFF',\r\n      inputValue: '',\r\n      isSingleSymbol: false,\r\n      borderStatus: 'default'\r\n    };\r\n\r\n    setTimeout(() => {\r\n      this.dataAfterRefresh();\r\n    });\r\n  }\r\n\r\n  dataAfterRefresh = () => {\r\n    const { color, inputType } = this.state;\r\n    if (JSON.parse(localStorage.getItem(inputType))) {\r\n      this.checkInputValue(color, inputType);\r\n    }\r\n  };\r\n\r\n  isHexadecimal = str => {\r\n    const regexp = /(^[0-9A-F]{6}$)|(^[0-9A-F]{3}$)/i;\r\n\r\n    return regexp.test(str);\r\n  };\r\n\r\n  onInputChange = event => {\r\n    this.checkInputValue(event.target.value, this.state.inputType);\r\n  };\r\n\r\n  checkInputValue = (inputVal, inputType) => {\r\n    let inputValue = inputVal;\r\n\r\n    if (inputValue.length === 1 && inputValue[0] !== '#') {\r\n      this.setState({ inputValue: '#' + inputValue, isSingleSymbol: true });\r\n    } else if (inputValue.length > 1 && inputValue[0] !== '#') {\r\n      inputValue = '#' + inputValue.slice(0, 6);\r\n\r\n      this.setState({ inputValue });\r\n    } else {\r\n      if (inputValue.length === 1 && inputValue[0] === '#') {\r\n        this.setState({ inputValue });\r\n\r\n        if (this.state.isSingleSymbol) {\r\n          if (inputValue !== '') {\r\n            this.setState({ inputValue: '' });\r\n\r\n            inputValue = '';\r\n\r\n            const colorData = { inputType, color: this.state.color };\r\n            this.sendColorDetails(colorData);\r\n\r\n            localStorage.removeItem(inputType);\r\n          }\r\n        }\r\n\r\n        this.setState({ isSingleSymbol: false });\r\n      } else {\r\n        if (inputValue !== '') {\r\n          this.setState({ inputValue, isSingleSymbol: true });\r\n        } else {\r\n          this.setState({ inputValue });\r\n\r\n          const colorData = { inputType, color: inputValue };\r\n          this.sendColorDetails(colorData);\r\n\r\n          localStorage.removeItem(inputType);\r\n        }\r\n      }\r\n    }\r\n\r\n    const valueToCheck =\r\n      inputValue.length > 1 ? inputValue.substr(1) : inputValue;\r\n\r\n    if (this.isHexadecimal(valueToCheck)) {\r\n      this.setState({ borderStatus: 'valid', color: inputValue }, () => {\r\n        const { color } = this.state;\r\n        const colorData = { inputType, color };\r\n\r\n        this.sendColorDetails(colorData);\r\n\r\n        localStorage.setItem(inputType, JSON.stringify(color));\r\n      });\r\n    } else {\r\n      this.setState(\r\n        {\r\n          borderStatus: valueToCheck !== '' ? 'invalid' : 'default',\r\n          color: ''\r\n        },\r\n        () => {\r\n          const colorData = { inputType, color: this.state.color };\r\n          const inpValue =\r\n            inputValue.length === 1 ? '#' + inputValue : inputValue;\r\n\r\n          this.sendColorDetails(colorData);\r\n\r\n          if (inpValue === '') {\r\n            localStorage.removeItem(inputType);\r\n          } else {\r\n            localStorage.setItem(inputType, JSON.stringify(inpValue));\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  sendColorDetails = colorData => {\r\n    this.props.passColorData(colorData);\r\n  };\r\n\r\n  render() {\r\n    const { placeholder, inputValue, borderStatus } = this.state;\r\n\r\n    return (\r\n      <div className=\"input\">\r\n        <input\r\n          value={inputValue}\r\n          className={\r\n            borderStatus === 'default'\r\n              ? 'setDefault'\r\n              : borderStatus === 'valid'\r\n              ? 'setValid'\r\n              : 'setInvalid'\r\n          }\r\n          onChange={this.onInputChange}\r\n          placeholder={placeholder}\r\n          maxLength=\"7\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './changeColor.css';\r\nimport Text from '../Text/Text';\r\nimport Input from '../Input/Input';\r\n\r\nexport default class ChangeColor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      color: '',\r\n      backgroundColor: ''\r\n    };\r\n  }\r\n\r\n  static VARIABLES = {\r\n    textColorInput: 'color',\r\n    backgroundColorInput: 'backgroundColor',\r\n    colorLabel: 'Color :',\r\n    backgroundColorLabel: 'Background color :'\r\n  };\r\n\r\n  setColorValues = colorData => {\r\n    this.setState({ [colorData.inputType]: colorData.color });\r\n  };\r\n\r\n  render() {\r\n    const { color, backgroundColor } = this.state;\r\n\r\n    const styles = { color, backgroundColor };\r\n\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"content\">\r\n          <div className=\"text\">\r\n            <Text styles={styles} />\r\n          </div>\r\n          <div className=\"inputs\">\r\n            <div className=\"colorDiv\">\r\n              <label htmlFor={ChangeColor.VARIABLES.textColorInput}>\r\n                {ChangeColor.VARIABLES.colorLabel}\r\n              </label>\r\n              <Input\r\n                id={ChangeColor.VARIABLES.textColorInput}\r\n                inputType={ChangeColor.VARIABLES.textColorInput}\r\n                passColorData={this.setColorValues}\r\n              />\r\n            </div>\r\n            <div className=\"backgroundColorDiv\">\r\n              <label htmlFor={ChangeColor.VARIABLES.backgroundColorInput}>\r\n                {ChangeColor.VARIABLES.backgroundColorLabel}\r\n              </label>\r\n              <Input\r\n                id={ChangeColor.VARIABLES.backgroundColorInput}\r\n                inputType={ChangeColor.VARIABLES.backgroundColorInput}\r\n                passColorData={this.setColorValues}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ChangeColor from './Components/ChangeColor/ChangeColor.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ChangeColor />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}