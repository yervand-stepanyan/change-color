{"version":3,"sources":["Components/Text/Text.js","Components/Input/Input.js","Components/ChangeColor/ChangeColor.js","serviceWorker.js","index.js"],"names":["Text","setColor","inputType","color","textNode","style","backgroundColor","setText","text","props","sendColorData","className","ref","node","this","React","Component","Input","dataAfterRefresh","state","JSON","parse","localStorage","getItem","checkInputValue","isHexadecimal","str","test","onInputChange","event","target","value","inputVal","inputValue","length","setState","isSingleSymbol","colorData","removeItem","valueToCheck","substr","borderStatus","setItem","stringify","inpValue","passColorData","placeholder","setTimeout","onChange","maxLength","ChangeColor","textColorInput","backgroundColorInput","colorLabel","backgroundColorLabel","htmlFor","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cc919dd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./text.css\";\r\n\r\nconst initialText = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. \" +\r\n  \"Aenean eleifend rutrum libero, finibus congue dolor tempor id. \" +\r\n  \"Nam interdum orci in massa imperdiet viverra. Duis neque libero, tempor ut leo in,\" +\r\n  \" porta volutpat ipsum. Nullam non turpis ex. Aliquam erat volutpat. Ut ante libero,\" +\r\n  \" vestibulum interdum ullamcorper ac, faucibus id metus. \" +\r\n  \"Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\" +\r\n  \" Maecenas consectetur, odio non maximus elementum, leo nisi imperdiet nunc, \" +\r\n  \"nec vehicula quam nisl vitae mi. Aliquam erat volutpat.\";\r\n\r\nexport default class Text extends React.Component {\r\n  setColor = ({inputType, color}) => {\r\n    if (inputType === \"textColor\")\r\n      this.textNode.style.color = color;\r\n    else\r\n      this.textNode.style.backgroundColor = color;\r\n  };\r\n\r\n  setText = (text) => {\r\n    if (this.textNode) {\r\n      this.setColor(this.props.sendColorData);\r\n    }\r\n    return text;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"text\" ref={node => (this.textNode = node)}>{this.setText(initialText)}</div>\r\n    );\r\n  }\r\n\r\n}\r\n","import React from \"react\";\r\nimport \"./input.css\";\r\n\r\nexport default class Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      color: JSON.parse(localStorage.getItem(this.props.inputType)) || \"\",\r\n      inputType: this.props.inputType,\r\n      placeholder: \"#FFFFFF\",\r\n      inputValue: \"\",\r\n      isSingleSymbol: false,\r\n      borderStatus: \"default\",\r\n    };\r\n\r\n    setTimeout(() => {\r\n      this.dataAfterRefresh();\r\n    });\r\n  }\r\n\r\n  dataAfterRefresh = () => {\r\n    const {color, inputType} = this.state;\r\n    if (JSON.parse(localStorage.getItem(inputType))) {\r\n      this.checkInputValue(color, inputType);\r\n    }\r\n  };\r\n\r\n  isHexadecimal = (str) => {\r\n    const regexp = /(^[0-9A-F]{6}$)|(^[0-9A-F]{3}$)/i;\r\n\r\n    return regexp.test(str);\r\n  };\r\n\r\n  onInputChange = (event) => {\r\n    this.checkInputValue(event.target.value, this.state.inputType);\r\n  };\r\n\r\n  checkInputValue = (inputVal, inputType) => {\r\n    let inputValue = inputVal;\r\n\r\n    if (inputValue.length === 1 && inputValue[0] !== \"#\") {\r\n      this.setState({inputValue: \"#\" + inputValue, isSingleSymbol: true});\r\n    } else {\r\n      if (inputValue.length === 1 && inputValue[0] === \"#\") {\r\n        this.setState({inputValue});\r\n\r\n        if (this.state.isSingleSymbol) {\r\n          if (inputValue !== \"\") {\r\n            this.setState({inputValue: \"\"});\r\n\r\n            inputValue = \"\";\r\n\r\n            const colorData = {inputType, color: this.state.color};\r\n            this.sendColorData(colorData);\r\n\r\n            localStorage.removeItem(inputType);\r\n          }\r\n        }\r\n\r\n        this.setState({isSingleSymbol: false});\r\n      } else {\r\n        if (inputValue !== \"\") {\r\n          this.setState({inputValue, isSingleSymbol: true});\r\n        } else {\r\n          this.setState({inputValue});\r\n\r\n          const colorData = {inputType, color: inputValue};\r\n          this.sendColorData(colorData);\r\n\r\n          localStorage.removeItem(inputType);\r\n        }\r\n      }\r\n    }\r\n\r\n    const valueToCheck = inputValue.length > 1 ? inputValue.substr(1) : inputValue;\r\n\r\n    if (this.isHexadecimal(valueToCheck)) {\r\n      this.setState({borderStatus: \"valid\", color: inputValue}, () => {\r\n        const {color} = this.state;\r\n        const colorData = {inputType, color};\r\n\r\n        this.sendColorData(colorData);\r\n\r\n        localStorage.setItem(inputType, JSON.stringify(color));\r\n      });\r\n    } else {\r\n      this.setState({borderStatus: valueToCheck !== \"\" ? \"invalid\" : \"default\", color: \"\"},\r\n        () => {\r\n          const colorData = {inputType, color: this.state.color};\r\n          const inpValue = inputValue.length === 1 ? \"#\" + inputValue : inputValue;\r\n\r\n          this.sendColorData(colorData);\r\n\r\n          if (inpValue === \"\") {\r\n            localStorage.removeItem(inputType);\r\n          } else {\r\n            localStorage.setItem(inputType, JSON.stringify(inpValue));\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  sendColorData = (colorData) => {\r\n    this.props.passColorData(colorData);\r\n  };\r\n\r\n  render() {\r\n    const {placeholder, inputValue, borderStatus} = this.state;\r\n\r\n    return (\r\n      <div className=\"input\">\r\n        <input\r\n          value={inputValue}\r\n          className={borderStatus === \"default\" ? \"setDefault\" :\r\n            borderStatus === \"valid\" ? \"setValid\" : \"setInvalid\"}\r\n          onChange={this.onInputChange}\r\n          placeholder={placeholder}\r\n          maxLength=\"7\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './changeColor.css';\r\nimport Text from '../Text/Text';\r\nimport Input from '../Input/Input';\r\n\r\nexport default class ChangeColor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      textColorInput: \"textColor\",\r\n      backgroundColorInput: \"backgroundColor\",\r\n      colorLabel: \"Color :\",\r\n      backgroundColorLabel: \"Background color :\",\r\n      colorData: {},\r\n    };\r\n  }\r\n\r\n  passColorData = (colorData) => {\r\n    this.setState({colorData: colorData});\r\n  };\r\n\r\n  render() {\r\n    const {textColorInput, backgroundColorInput, colorLabel, backgroundColorLabel, colorData} = this.state;\r\n\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"content\">\r\n          <div className=\"text\">\r\n            <Text sendColorData={colorData}/>\r\n          </div>\r\n          <div className=\"inputs\">\r\n            <div className=\"colorDiv\">\r\n              <label htmlFor={textColorInput}>{colorLabel}</label>\r\n              <Input id={textColorInput} inputType={textColorInput} passColorData={this.passColorData}/>\r\n            </div>\r\n            <div className=\"backgroundColorDiv\">\r\n              <label htmlFor={backgroundColorInput}>{backgroundColorLabel}</label>\r\n              <Input id={backgroundColorInput} inputType={backgroundColorInput} passColorData={this.passColorData}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ChangeColor from './Components/ChangeColor/ChangeColor.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ChangeColor/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}